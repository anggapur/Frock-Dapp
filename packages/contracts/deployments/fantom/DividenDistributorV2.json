{
  "address": "0x12567EEC29fa41aB9540c2b9daad790f25295763",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "ExcludedFromReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumFrockToSwap",
          "type": "uint256"
        }
      ],
      "name": "NewMinimumFrockToSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rewardSource",
          "type": "uint8"
        }
      ],
      "name": "NewReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMainToken",
          "type": "address"
        }
      ],
      "name": "UpdateMainToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESCUER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rewardIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "buildingTradeDividendOfHolder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "excludedFromReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "rewardSource",
          "type": "uint8"
        }
      ],
      "name": "getRewardIdsUnclaimed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "rewardSource",
          "type": "uint8"
        }
      ],
      "name": "getTotalUnclaimedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalUnclaimedReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "rewardSource",
          "type": "uint8"
        }
      ],
      "name": "getUnclaimedRewardIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "holderToTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExcludedFromReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listExcludedFromReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumFrockToSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "issuedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalExcludedFromSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "rewardSource",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "setMainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumFrockToSwap",
          "type": "uint256"
        }
      ],
      "name": "setMinimumFrockToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndShareReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5acd6e9c6b10576136fe2604bd725fa957528f1bf9b3cfa5806880f2f2236f32",
  "receipt": {
    "to": null,
    "from": "0x4b2F59151d4bb1692439226f872ae7D8B93A9B11",
    "contractAddress": "0x12567EEC29fa41aB9540c2b9daad790f25295763",
    "transactionIndex": 39,
    "gasUsed": "2945062",
    "logsBloom": "0x
    "blockHash": "0x00015f77000000794264f1c07963d033d6d95565944c00b1cec19c312ae119da",
    "transactionHash": "0x5acd6e9c6b10576136fe2604bd725fa957528f1bf9b3cfa5806880f2f2236f32",
    "logs": [],
    "blockNumber": 32793681,
    "cumulativeGasUsed": "7625049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6f78f81e192b1ef476c8ae9242dd6f11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ExcludedFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumFrockToSwap\",\"type\":\"uint256\"}],\"name\":\"NewMinimumFrockToSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rewardSource\",\"type\":\"uint8\"}],\"name\":\"NewReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMainToken\",\"type\":\"address\"}],\"name\":\"UpdateMainToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESCUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"buildingTradeDividendOfHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"excludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"rewardSource\",\"type\":\"uint8\"}],\"name\":\"getRewardIdsUnclaimed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"rewardSource\",\"type\":\"uint8\"}],\"name\":\"getTotalUnclaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnclaimedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"rewardSource\",\"type\":\"uint8\"}],\"name\":\"getUnclaimedRewardIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"holderToTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listExcludedFromReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumFrockToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcludedFromSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rewardSource\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setMainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumFrockToSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumFrockToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndShareReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchClaimReward(uint256[])\":{\"details\":\"to claim multiple reward at once\"},\"buildingTradeDividendOfHolder(address)\":{\"details\":\"get total amount of building trade dividenonly calculate for reward that coming from swapAndShareReward function\"},\"excludedFromReward(address,bool)\":{\"details\":\"to Exclude address from reward distribution\"},\"getBalance()\":{\"details\":\"get total amount of FTM that owned by this contract\"},\"getRewardIdsUnclaimed(address,uint8)\":{\"details\":\"Get list if reward id that not yet claimed by holder\",\"params\":{\"holder\":\"is holder's address \",\"rewardSource\":\"0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenBalance()\":{\"details\":\"get total amount of frock that owned by this contract\"},\"getTotalUnclaimedReward(address,uint8)\":{\"details\":\"Get total amount of reward that not yet claimed by holder\",\"params\":{\"holder\":\"is holder's address \",\"rewardSource\":\"0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward\"}},\"getUnclaimedRewardIds(address,uint8)\":{\"details\":\"Get list if reward id that not yet claimed by holder\",\"params\":{\"holder\":\"is holder's address \",\"rewardSource\":\"0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"ERC20 token contract address\",\"tokenAmount\":\"Amount to recover\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"rescueERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to rescue\",\"to\":\"Recipient address\",\"tokenContract\":\"ERC20 token contract address\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setMainToken(address)\":{\"details\":\"set main token (frock token) address\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 tokens locked up in this contract.\"},\"rescueERC20(address,address,uint256)\":{\"notice\":\"Rescue ERC20 tokens locked up in this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DividenDistributor/DividenDistributorV2.sol\":\"DividenDistributorV2\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/DividenDistributor/DividenDistributorV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../EIP/SafeTokenRecoverUpgradeable.sol\\\";\\nimport \\\"../Extensions/IERC20SnapshotUpgradeable.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./IDividenDistributor.sol\\\";\\n\\ncontract DividenDistributorV1 is  \\n    IDividenDistributor,\\n    Initializable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    SafeTokenRecoverUpgradeable,\\n    PausableUpgradeable    \\n{\\n    struct Reward {\\n        uint256 rewardAmount;        \\n        uint256 totalClaimed;\\n        uint256 issuedAt;\\n        uint256 snapshotId;  \\n        uint256 totalExcludedFromSupply;      \\n        uint8 rewardSource;  \\n        mapping(address => bool) isExcludedFromReward;   \\n        mapping(address => bool) rewardClaimed;\\n    }\\n\\n    mapping(uint256 => Reward) public rewards;\\n    address[] public listExcludedFromReward;\\n\\n    IUniswapV2Router02 public uniswapV2Router;    \\n    uint256 public lastRewardShare;   \\n    uint256 public rewardLength;     \\n    uint256 public minimumFrockToSwap;\\n    address public mainToken;       \\n    bool private inSwap;\\n    bytes32 public constant REWARDER_ROLE = keccak256(\\\"REWARDER\\\");\\n    \\n    mapping(address => bool) public isExcludedFromReward;    \\n    mapping(address => mapping(uint8 => uint256)) public holderToTotalClaimed; // Holder Address => Reward Source => Total Amount FTM Claimed\\n\\n    event UpdateMainToken(address newMainToken);   \\n    event NewReward(uint256 rewardId, uint256 rewardAmount, uint256 snapshotId, uint8 rewardSource);\\n    event ClaimReward(uint256 indexed rewardId, uint256 rewardAmount, address indexed holder); \\n    event ExcludedFromReward(address indexed holder, bool state);\\n    event NewMinimumFrockToSwap(uint256 newMinimumFrockToSwap);\\n\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n    \\n    // Initialize\\n    function initialize() external initializer {        \\n\\n        __AccessControl_init_unchained();\\n        __Context_init_unchained();\\n        __SafeTokenRecover_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        // Setup deployer as Admin when construction\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(RESCUER_ROLE, _msgSender());\\n\\n        minimumFrockToSwap = 1000 * (10 ** 9);\\n\\n        uniswapV2Router = IUniswapV2Router02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\\n        inSwap = false;\\n    }\\n\\n    /**\\n     * @dev override function when contract upgraded\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override {\\n        require(\\n            newImplementation != address(0),\\n            \\\"Staking: Cannot zero address\\\"\\n        );\\n        require(\\n            _msgSender() == _getAdmin(),\\n            \\\"Staking: Not the Owner of Contract\\\"\\n        );\\n    } // solhint-disable-line no-empty-blocks    \\n\\n    function swapAndShareReward() external onlyRole(REWARDER_ROLE) {\\n        require(mainToken != address(0), \\\"DD : MAIN_TOKEN_NOT_SETTED\\\");\\n        uint256 mainTokenBalance = getTokenBalance();\\n\\n        // Minimum Frock that must owned by Dividen contract to Swap\\n        require(\\n            mainTokenBalance >= minimumFrockToSwap,\\n            \\\"DD: REQUIREMENT_NOT_PASSED\\\"\\n        );\\n\\n        lastRewardShare = block.timestamp;\\n\\n        uint256 ethBalanceBefore = getBalance();\\n        \\n        // Swap        \\n        _swapTokensForEth(mainTokenBalance);\\n\\n        uint256 ethBalanceAfter = getBalance();\\n\\n        _createReward(ethBalanceAfter - ethBalanceBefore, 0);\\n    }    \\n      \\n    \\n    function shareReward() external payable onlyRole(REWARDER_ROLE) {\\n        require(msg.value > 0, \\\"DD: NO_ETH_SENT\\\");\\n        _createReward(msg.value, 1);\\n    }\\n\\n    function _createReward(uint256 rewardAmount, uint8 rewardSource) internal {\\n        uint256 snapshotId = IERC20SnapshotUpgradeable(mainToken).snapshot();\\n        uint256 rewardId = rewardLength;\\n        Reward storage reward = rewards[rewardId];\\n        reward.rewardAmount = rewardAmount;\\n        reward.totalClaimed = 0;\\n        reward.issuedAt = block.timestamp;\\n        reward.snapshotId = snapshotId;\\n        reward.rewardSource = rewardSource; \\n        \\n        uint256 totalExcluded = 0;\\n        for (uint8 i = 0; i < listExcludedFromReward.length; i++) {\\n            reward.isExcludedFromReward[listExcludedFromReward[i]] = true;\\n            totalExcluded += IERC20SnapshotUpgradeable(mainToken).balanceOfAt(listExcludedFromReward[i], snapshotId);\\n        }\\n        reward.totalExcludedFromSupply = totalExcluded;\\n                         \\n        rewardLength++;\\n\\n        emit NewReward(rewardId, rewardAmount, snapshotId, rewardSource);\\n    }\\n\\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(mainToken);\\n        path[1] = uniswapV2Router.WETH();\\n        IERC20Upgradeable(mainToken).approve(address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function claimReward(uint256 rewardId) external override {\\n        require(_rewardExists(rewardId), \\\"DD: REWARD_NOT_EXISTS\\\");\\n        require(!rewards[rewardId].isExcludedFromReward[_msgSender()], \\\"DD: NOT_ALLOWED_TO_CLAIM\\\");\\n        require(!rewards[rewardId].rewardClaimed[_msgSender()], \\\"DD: REWARD_HAS_CLAIMED\\\");        \\n            \\n        uint256 rewardAmount = _claim(rewardId, _msgSender());\\n        _safeTransferETH(_msgSender(), rewardAmount);\\n        \\n        emit ClaimReward(rewardId, rewardAmount, _msgSender());\\n    }\\n\\n    /**\\n     * @dev to claim multiple reward at once\\n     */\\n    function batchClaimReward(uint256[] calldata rewardIds) external {\\n        uint256 totalRewardAmount = 0;\\n\\n        for (uint256 i = 0; i < rewardIds.length; i++) {\\n            uint256 rewardId = rewardIds[i];\\n            \\n            if(_rewardExists(rewardId) && \\n                !rewards[rewardId].isExcludedFromReward[_msgSender()] && \\n                !rewards[rewardId].rewardClaimed[_msgSender()]\\n            ) {\\n                 uint256 rewardAmount = _claim(rewardId, _msgSender());\\n                 totalRewardAmount += rewardAmount;\\n                emit ClaimReward(rewardId, rewardAmount, _msgSender());\\n            }            \\n        }\\n\\n        if(totalRewardAmount > 0) {\\n            _safeTransferETH(_msgSender(), totalRewardAmount);\\n        }\\n    }\\n\\n    function _claim(uint256 rewardId, address holder) internal returns (uint256){\\n        Reward storage reward = rewards[rewardId];    \\n        (uint256 holderBalance,,uint256 rewardAmount) = _calculateRewardAmount(\\n            reward.snapshotId,\\n            reward.totalExcludedFromSupply,\\n            reward.rewardAmount,\\n            holder\\n        );\\n\\n        require(holderBalance > 0, \\\"DD: NOT_A_HOLDER\\\");\\n\\n        reward.rewardClaimed[holder] = true;\\n        reward.totalClaimed += rewardAmount;\\n        holderToTotalClaimed[holder][reward.rewardSource] += rewardAmount;  \\n\\n        return rewardAmount;\\n    }\\n\\n    function _calculateRewardAmount(\\n        uint256 snapshotId,\\n        uint256 totalExcludedFromSupply,\\n        uint256 rewardAmount,\\n        address holder\\n    ) internal view returns (uint256 holderBalance, uint256 supply, uint256 calculateRewardAmount) {\\n        holderBalance = IERC20SnapshotUpgradeable(mainToken).balanceOfAt(holder, snapshotId);\\n        supply = IERC20SnapshotUpgradeable(mainToken).totalSupplyAt(snapshotId) - totalExcludedFromSupply;        \\n        calculateRewardAmount = rewardAmount * holderBalance / supply;\\n    }\\n\\n    function _rewardExists(uint256 rewardId) internal view returns (bool) {\\n        return rewards[rewardId].issuedAt > 0;\\n    }\\n\\n    /**\\n     * @dev get total amount of frock that owned by this contract\\n     */\\n    function getTokenBalance() public view returns(uint256 tokenAmount) {\\n        return IERC20Upgradeable(mainToken).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev get total amount of FTM that owned by this contract\\n     */\\n    function getBalance() public view returns(uint256 balance) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev set main token (frock token) address\\n     */\\n    function setMainToken(address tokenAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mainToken = tokenAddress;\\n        emit UpdateMainToken(tokenAddress);\\n    }\\n\\n    /**\\n     * \\n     */\\n    function setMinimumFrockToSwap(uint256 newMinimumFrockToSwap) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        minimumFrockToSwap = newMinimumFrockToSwap;\\n        emit NewMinimumFrockToSwap(newMinimumFrockToSwap);\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'DD: ETH_TRANSFER_FAILED');\\n    }\\n\\n    /**\\n     * @dev to Exclude address from reward distribution\\n     */\\n    function excludedFromReward(address holder, bool state) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(isExcludedFromReward[holder] != state, \\\"Cannot set to same state\\\");\\n        _excludedFromReward(holder, state);\\n    }\\n\\n    function _excludedFromReward(address holder, bool state) internal {\\n        isExcludedFromReward[holder] = state;\\n\\n        if(state) {\\n            // Add to list\\n            listExcludedFromReward.push(holder);            \\n        } else {\\n            // Remove fromlist           \\n            for(uint256 i = 0; i < listExcludedFromReward.length ; i ++) {\\n                if(listExcludedFromReward[i] == holder) {\\n                    if(i == listExcludedFromReward.length-1) {\\n                        // Last element\\n                        listExcludedFromReward.pop();\\n                    } else {\\n                        // First or Not last element\\n                        listExcludedFromReward[i] = listExcludedFromReward[listExcludedFromReward.length - 1];\\n                        listExcludedFromReward.pop();\\n                    }\\n                    break;\\n                }\\n            }\\n        }\\n\\n        emit  ExcludedFromReward(holder, state);\\n    }\\n\\n    /**\\n     * @dev get total amount of building trade dividen\\n     * @dev only calculate for reward that coming from swapAndShareReward function\\n     */\\n    function buildingTradeDividendOfHolder(address holder) external view returns (uint256) {\\n        if(!isExcludedFromReward[holder]) {\\n            uint256 snapshotId = IERC20SnapshotUpgradeable(mainToken).lastSnapshotId();\\n            uint256 holderBalance = IERC20SnapshotUpgradeable(mainToken).balanceOfAt(holder, snapshotId);\\n            uint256 supply = IERC20SnapshotUpgradeable(mainToken).totalSupplyAt(snapshotId);\\n            uint256 currentContractBalance = getTokenBalance();\\n\\n            // Calculate The total Tokens that need to excluded from reward\\n            uint256 totalExcludedFromReward = 0;\\n            for(uint256 i = 0; i < listExcludedFromReward.length; i++) {\\n                totalExcludedFromReward += IERC20SnapshotUpgradeable(mainToken).balanceOfAt(listExcludedFromReward[i], snapshotId);\\n            }            \\n            return currentContractBalance * holderBalance / (supply - totalExcludedFromReward);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Get list if reward id that not yet claimed by holder\\n     * @param holder is holder's address \\n     * @param rewardSource 0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward\\n     */\\n    function getRewardIdsUnclaimed(address holder, uint8 rewardSource) public view returns (uint256[] memory) {\\n        uint256[] memory tempRewardIds = new uint256[](rewardLength);\\n\\n        uint256 tempLength = 0;\\n        for(uint i = 0; i < rewardLength; i++) {\\n            // Reward memory reward = rewards[i];\\n            uint8 rewardSourceType = rewards[i].rewardSource;            \\n            if(rewardSourceType == rewardSource) {\\n                bool isRewardClaimed = rewards[i].rewardClaimed[holder];\\n                bool isHolderExcludedFromReward = rewards[i].isExcludedFromReward[holder];\\n                if(!isRewardClaimed && !isHolderExcludedFromReward) {                    \\n                    tempRewardIds[tempLength] = i;\\n                    tempLength++;\\n                }   \\n            }\\n        }      \\n\\n        uint256[] memory rewardIds = new uint256[](tempLength);\\n        for(uint j = 0; j < tempLength; j++ ){\\n            rewardIds[j] = tempRewardIds[j];\\n        }\\n\\n        return rewardIds;\\n    }\\n\\n     /**\\n     * @dev Get total amount of reward that not yet claimed by holder\\n     * @param holder is holder's address \\n     * @param rewardSource 0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward\\n     */\\n    function getTotalUnclaimedReward(address holder, uint8 rewardSource) external view returns (uint256 totalUnclaimedReward) {\\n        uint256[] memory rewardIdsUnclaimed = getRewardIdsUnclaimed(holder, rewardSource);\\n        for(uint i = 0 ; i < rewardIdsUnclaimed.length; i++) {\\n            uint256 rewardId = rewardIdsUnclaimed[i];            \\n            (,,uint256 rewardAmount) = _calculateRewardAmount(\\n                rewards[rewardId].snapshotId,\\n                rewards[rewardId].totalExcludedFromSupply,\\n                rewards[rewardId].rewardAmount,\\n                holder\\n            );\\n            totalUnclaimedReward += rewardAmount;\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId \\n        || interfaceId == type(IDividenDistributor).interfaceId\\n        || super.supportsInterface(interfaceId);        \\n    }\\n    \\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xde9fc7440814458fa9653e4dbab16d34d893b3cf2869af4bdcb3b2f1b60d128b\",\"license\":\"MIT\"},\"contracts/DividenDistributor/DividenDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\nimport \\\"./DividenDistributorV1.sol\\\";\\n\\ncontract DividenDistributorV2 is DividenDistributorV1\\n{\\n   /**\\n     * @dev Get list if reward id that not yet claimed by holder\\n     * @param holder is holder's address \\n     * @param rewardSource 0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward\\n     */\\n    function getUnclaimedRewardIds(address holder, uint8 rewardSource) public virtual view returns (uint256[] memory) {\\n        uint256[] memory tempRewardIds = new uint256[](rewardLength);\\n\\n        uint256 tempLength = 0;\\n        for(uint i = 0; i < rewardLength; i++) {\\n            // Reward memory reward = rewards[i];\\n            uint8 rewardSourceType = rewards[i].rewardSource;            \\n            if(rewardSourceType == rewardSource) {\\n                bool isRewardClaimed = rewards[i].rewardClaimed[holder];\\n                bool isHolderExcludedFromReward = rewards[i].isExcludedFromReward[holder];\\n                uint256 holderBalance = IERC20SnapshotUpgradeable(mainToken).balanceOfAt(holder, rewards[i].snapshotId);\\n                if(!isRewardClaimed && !isHolderExcludedFromReward && holderBalance > 0) {                    \\n                    tempRewardIds[tempLength] = i;\\n                    tempLength++;\\n                }   \\n            }\\n        }      \\n\\n        uint256[] memory rewardIds = new uint256[](tempLength);\\n        for(uint j = 0; j < tempLength; j++ ){\\n            rewardIds[j] = tempRewardIds[j];\\n        }\\n\\n        return rewardIds;\\n    }\\n}\\n\",\"keccak256\":\"0x4557d13d4b634e27215e563699e64d232c0c93d29a2d2c37b26815af2b3ba050\",\"license\":\"MIT\"},\"contracts/DividenDistributor/IDividenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\ninterface IDividenDistributor {\\n    function claimReward(uint256 rewardId) external;\\n}\",\"keccak256\":\"0x0b7e294835e95c031d53b7259e058b23fd9ea0b0a0bad1e883f0e213b6f6e585\",\"license\":\"MIT\"},\"contracts/DividenDistributor/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\",\"keccak256\":\"0xa6d7cfe9ffe88c9b32c0c27eeec69eff4f217b062ef1a03c24bcecfecfb00537\",\"license\":\"MIT\"},\"contracts/EIP/SafeTokenRecoverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title SafeTokenRecover\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\n * @dev Allow to recover any ERC20 sent into the contract for error\\n */\\ncontract SafeTokenRecoverUpgradeable is\\n    Initializable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bytes32 public constant RESCUER_ROLE = keccak256(\\\"RESCUER_ROLE\\\");\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __SafeTokenRecover_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n\\n        __SafeTokenRecover_init_unchained();\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase, no-empty-blocks\\n    function __SafeTokenRecover_init_unchained() internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 tokens locked up in this contract.\\n     * @param tokenAddress ERC20 token contract address\\n     * @param tokenAmount Amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyRole(RESCUER_ROLE)\\n    {\\n        IERC20Upgradeable(tokenAddress).safeTransfer(_msgSender(), tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Rescue ERC20 tokens locked up in this contract.\\n     * @param tokenContract ERC20 token contract address\\n     * @param to        Recipient address\\n     * @param amount    Amount to rescue\\n     */\\n    function rescueERC20(\\n        IERC20Upgradeable tokenContract,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(RESCUER_ROLE) {\\n        tokenContract.safeTransfer(to, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcae55baca91a73a4d84d966108e96ad250ce72430fccc26ac05e705e52e7123a\",\"license\":\"MIT\"},\"contracts/Extensions/IERC20SnapshotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20SnapshotUpgradeable {\\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\\n    \\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\\n\\n    function snapshot() external returns (uint256);\\n\\n    function lastSnapshotId() external view returns (uint256);\\n}\",\"keccak256\":\"0xd1ec32f70dabe5b3463b7830ba8200c0313785f0ca3fca4e8e8d3764e2470eb5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c61345561004b60003960008181610d1001528181610d5001528181610dd90152610e1901526134556000f3fe6080604052600436106102065760003560e01c806380313d3111610117578063b2118a8d116100a5578063d547741f1161006c578063d547741f14610634578063daf9412314610654578063f301af4214610674578063f78bddf3146106f8578063fd21c1251461071857005b8063b2118a8d1461059d578063b854aca0146105bd578063b95c5746146105dd578063c760da04146105f4578063cb0968fa1461061457005b806388f82020116100e957806388f82020146104f75780638980f11f1461052857806391d1485414610548578063a217fddf14610568578063ae169a501461057d57005b806380313d31146104915780638129fc1c1461049957806382b2e257146104ae5780638580cf76146104c357005b806336568abe116101945780634f1ef286116101665780634f1ef286146103ea5780635069b864146103fd5780635c975abb146104365780635e732dd81461044f578063713725441461046f57005b806336568abe146103725780633659cfe6146103925780633fc15f15146103b25780634c95bc93146103d357005b80631694505e116101d85780631694505e146102a95780631a19aa40146102e2578063248a9ca31461030257806327ce464e146103325780632f2ff15d1461035257005b806301ffc9a71461020f57806308bf9922146102445780630958dbbc1461026957806312065fe01461029657005b3661020d57005b005b34801561021b57600080fd5b5061022f61022a366004612f41565b61072d565b60405190151581526020015b60405180910390f35b34801561025057600080fd5b5061025b6101645481565b60405190815260200161023b565b34801561027557600080fd5b50610289610284366004612e3d565b610773565b60405161023b9190613056565b3480156102a257600080fd5b504761025b565b3480156102b557600080fd5b50610161546102ca906001600160a01b031681565b6040516001600160a01b03909116815260200161023b565b3480156102ee57600080fd5b5061025b6102fd366004612cda565b610924565b34801561030e57600080fd5b5061025b61031d366004612f03565b600090815260c9602052604090206001015490565b34801561033e57600080fd5b5061020d61034d366004612cda565b610bf4565b34801561035e57600080fd5b5061020d61036d366004612f1c565b610c57565b34801561037e57600080fd5b5061020d61038d366004612f1c565b610c82565b34801561039e57600080fd5b5061020d6103ad366004612cda565b610d05565b3480156103be57600080fd5b50610165546102ca906001600160a01b031681565b3480156103df57600080fd5b5061025b6101625481565b61020d6103f8366004612d4d565b610dce565b34801561040957600080fd5b5061025b610418366004612e3d565b61016760209081526000928352604080842090915290825290205481565b34801561044257600080fd5b5061012d5460ff1661022f565b34801561045b57600080fd5b5061020d61046a366004612f03565b610e84565b34801561047b57600080fd5b5061025b6000805160206133d983398151915281565b61020d610ec6565b3480156104a557600080fd5b5061020d610f3e565b3480156104ba57600080fd5b5061025b611031565b3480156104cf57600080fd5b5061025b7f5a8bfb9223d93ad39e310233fff7bc65227887789e6e83c62b12f0dfdd782ec381565b34801561050357600080fd5b5061022f610512366004612cda565b6101666020526000908152604090205460ff1681565b34801561053457600080fd5b5061020d610543366004612e11565b6110b3565b34801561055457600080fd5b5061022f610563366004612f1c565b6110e0565b34801561057457600080fd5b5061025b600081565b34801561058957600080fd5b5061020d610598366004612f03565b61110b565b3480156105a957600080fd5b5061020d6105b8366004612f6b565b61128b565b3480156105c957600080fd5b5061020d6105d8366004612d14565b6112be565b3480156105e957600080fd5b5061025b6101635481565b34801561060057600080fd5b5061020d61060f366004612e71565b611344565b34801561062057600080fd5b506102ca61062f366004612f03565b611465565b34801561064057600080fd5b5061020d61064f366004612f1c565b611490565b34801561066057600080fd5b5061028961066f366004612e3d565b6114b6565b34801561068057600080fd5b506106c861068f366004612f03565b61015f60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909160ff1686565b604080519687526020870195909552938501929092526060840152608083015260ff1660a082015260c00161023b565b34801561070457600080fd5b5061025b610713366004612e3d565b6116fa565b34801561072457600080fd5b5061020d61178f565b60006001600160e01b03198216637965db0b60e01b148061075e57506001600160e01b03198216630ae169a560e41b145b8061076d575061076d82611896565b92915050565b606060006101635467ffffffffffffffff8111156107935761079361339f565b6040519080825280602002602001820160405280156107bc578160200160208202803683370190505b5090506000805b6101635481101561087e57600081815261015f602052604090206005015460ff90811690861681141561086b57600082815261015f602090815260408083206001600160a01b038b1684526007810183528184205460069091019092529091205460ff918216911681158015610837575080155b15610868578386868151811061084f5761084f613389565b60209081029190910101528461086481613322565b9550505b50505b508061087681613322565b9150506107c3565b5060008167ffffffffffffffff81111561089a5761089a61339f565b6040519080825280602002602001820160405280156108c3578160200160208202803683370190505b50905060005b8281101561091a578381815181106108e3576108e3613389565b60200260200101518282815181106108fd576108fd613389565b60209081029190910101528061091281613322565b9150506108c9565b5095945050505050565b6001600160a01b0381166000908152610166602052604081205460ff16610bec57610165546040805163020debef60e61b815290516000926001600160a01b03169163837afbc0916004808301926020929190829003018186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190612fac565b6101655460405163277166bf60e11b81526001600160a01b0386811660048301526024820184905292935060009290911690634ee2cd7e9060440160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190612fac565b61016554604051630981b24d60e41b8152600481018590529192506000916001600160a01b039091169063981b24d09060240160206040518083038186803b158015610a9957600080fd5b505afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612fac565b90506000610add611031565b90506000805b61016054811015610bc2576101655461016080546001600160a01b0390921691634ee2cd7e919084908110610b1a57610b1a613389565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b0390911660048201526024810189905260440160206040518083038186803b158015610b6c57600080fd5b505afa158015610b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba49190612fac565b610bae908361326f565b915080610bba81613322565b915050610ae3565b50610bcd81846132c8565b610bd785846132a9565b610be19190613287565b979650505050505050565b506000919050565b6000610c0081336118cb565b61016580546001600160a01b0319166001600160a01b0384169081179091556040519081527fd68271512da4c3278e5f7e25443d78b7221df5389d259a6fbdc569f5b020e54d906020015b60405180910390a15050565b600082815260c96020526040902060010154610c7381336118cb565b610c7d838361192f565b505050565b6001600160a01b0381163314610cf75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610d0182826119b5565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d4e5760405162461bcd60e51b8152600401610cee906130cd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d80611a1c565b6001600160a01b031614610da65760405162461bcd60e51b8152600401610cee90613119565b610daf81611a4f565b60408051600080825260208201909252610dcb91839190611b18565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e175760405162461bcd60e51b8152600401610cee906130cd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e49611a1c565b6001600160a01b031614610e6f5760405162461bcd60e51b8152600401610cee90613119565b610e7882611a4f565b610d0182826001611b18565b6000610e9081336118cb565b6101648290556040518281527fee2f6e6e29939099157785f376fdb1a1a49dff6b9ac02f7e6ee4797ecfd49f7190602001610c4b565b7f5a8bfb9223d93ad39e310233fff7bc65227887789e6e83c62b12f0dfdd782ec3610ef181336118cb565b60003411610f335760405162461bcd60e51b815260206004820152600f60248201526e11110e881393d7d1551217d4d15395608a1b6044820152606401610cee565b610dcb346001611c63565b600054610100900460ff16610f595760005460ff1615610f5d565b303b155b610f795760405162461bcd60e51b8152600401610cee90613165565b600054610100900460ff16158015610f9b576000805461ffff19166101011790555b610fa3611ecb565b610fab611ecb565b610fb3611ef4565b610fbb611f70565b610fc6600033611fa4565b610fde6000805160206133d983398151915233611fa4565b64e8d4a510006101645561016180546001600160a01b03191673f491e7b69e4244ad4002bc14e878a34207e38c29179055610165805460ff60a01b191690558015610dcb576000805461ff001916905550565b610165546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190612fac565b905090565b6000805160206133d98339815191526110cc81336118cb565b610c7d6001600160a01b0384163384611fae565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815261015f60205260409020600201546111625760405162461bcd60e51b815260206004820152601560248201527444443a205245574152445f4e4f545f45584953545360581b6044820152606401610cee565b600081815261015f6020908152604080832033845260060190915290205460ff16156111d05760405162461bcd60e51b815260206004820152601860248201527f44443a204e4f545f414c4c4f5745445f544f5f434c41494d00000000000000006044820152606401610cee565b600081815261015f6020908152604080832033845260070190915290205460ff16156112375760405162461bcd60e51b815260206004820152601660248201527511110e88149155d0549117d21054d7d0d3105253515160521b6044820152606401610cee565b60006112438233612000565b9050611250335b826120fa565b604051818152339083907f3c9b0efd2967a5b39ada6ae8672433baffccdaa48a527ea0c7659336bed9ff0e9060200160405180910390a35050565b6000805160206133d98339815191526112a481336118cb565b6112b86001600160a01b0385168484611fae565b50505050565b60006112ca81336118cb565b6001600160a01b0383166000908152610166602052604090205460ff161515821515141561133a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f742073657420746f2073616d6520737461746500000000000000006044820152606401610cee565b610c7d83836121b7565b6000805b8281101561145557600084848381811061136457611364613389565b90506020020135905061138981600090815261015f6020526040902060020154151590565b80156113b35750600081815261015f6020908152604080832033845260060190915290205460ff16155b80156113dd5750600081815261015f6020908152604080832033845260070190915290205460ff16155b156114425760006113ee8233612000565b90506113fa818561326f565b9350336001600160a01b0316827f3c9b0efd2967a5b39ada6ae8672433baffccdaa48a527ea0c7659336bed9ff0e8360405161143891815260200190565b60405180910390a3505b508061144d81613322565b915050611348565b508015610c7d57610c7d3361124a565b610160818154811061147657600080fd5b6000918252602090912001546001600160a01b0316905081565b600082815260c960205260409020600101546114ac81336118cb565b610c7d83836119b5565b606060006101635467ffffffffffffffff8111156114d6576114d661339f565b6040519080825280602002602001820160405280156114ff578160200160208202803683370190505b5090506000805b6101635481101561165e57600081815261015f602052604090206005015460ff90811690861681141561164b57600082815261015f602081815260408084206001600160a01b038c81168087526007830185528387205460068401865284882054610165548b8a5297909652600390930154935163277166bf60e11b81526004810191909152602481019390935260ff91821695919093169390921690634ee2cd7e9060440160206040518083038186803b1580156115c457600080fd5b505afa1580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc9190612fac565b90508215801561160a575081155b80156116165750600081115b15611647578487878151811061162e5761162e613389565b60209081029190910101528561164381613322565b9650505b5050505b508061165681613322565b915050611506565b5060008167ffffffffffffffff81111561167a5761167a61339f565b6040519080825280602002602001820160405280156116a3578160200160208202803683370190505b50905060005b8281101561091a578381815181106116c3576116c3613389565b60200260200101518282815181106116dd576116dd613389565b6020908102919091010152806116f281613322565b9150506116a9565b6000806117078484610773565b905060005b815181101561178757600082828151811061172957611729613389565b602090810291909101810151600081815261015f90925260408220600381015460048201549154929450611760929091908a6123b8565b925050508085611770919061326f565b94505050808061177f90613322565b91505061170c565b505092915050565b7f5a8bfb9223d93ad39e310233fff7bc65227887789e6e83c62b12f0dfdd782ec36117ba81336118cb565b610165546001600160a01b03166118135760405162461bcd60e51b815260206004820152601a60248201527f4444203a204d41494e5f544f4b454e5f4e4f545f5345545445440000000000006044820152606401610cee565b600061181d611031565b9050610164548110156118725760405162461bcd60e51b815260206004820152601a60248201527f44443a20524551554952454d454e545f4e4f545f5041535345440000000000006044820152606401610cee565b426101625547611881826124f3565b476112b861188f83836132c8565b6000611c63565b60006001600160e01b03198216637965db0b60e01b148061076d57506301ffc9a760e01b6001600160e01b031983161461076d565b6118d582826110e0565b610d01576118ed816001600160a01b03166014612700565b6118f8836020612700565b604051602001611909929190612fe1565b60408051601f198184030181529082905262461bcd60e51b8252610cee9160040161309a565b61193982826110e0565b610d0157600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119bf82826110e0565b15610d0157600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b6001600160a01b038116611aa55760405162461bcd60e51b815260206004820152601c60248201527f5374616b696e673a2043616e6e6f74207a65726f2061646472657373000000006044820152606401610cee565b611aad6128a3565b6001600160a01b0316336001600160a01b031614610dcb5760405162461bcd60e51b815260206004820152602260248201527f5374616b696e673a204e6f7420746865204f776e6572206f6620436f6e74726160448201526118dd60f21b6064820152608401610cee565b6000611b22611a1c565b9050611b2d846128cb565b600083511180611b3a5750815b15611b4b57611b498484612970565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611c5c57805460ff191660011781556040516001600160a01b0383166024820152611bca90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612970565b50805460ff19168155611bdb611a1c565b6001600160a01b0316826001600160a01b031614611c535760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610cee565b611c5c85612a5b565b5050505050565b6101655460408051634b88b8ad60e11b815290516000926001600160a01b031691639711715a91600480830192602092919082900301818787803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190612fac565b61016354600081815261015f60205260408120868155600181018290554260028201556003810184905560058101805460ff191660ff8816179055929350909190805b6101605460ff82161015611e5b5760018360060160006101608460ff1681548110611d5257611d52613389565b6000918252602080832091909101546001600160a01b0390811684529083019390935260409091019020805460ff1916921515929092179091556101655461016080549190921691634ee2cd7e9160ff8516908110611db357611db3613389565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b0390911660048201526024810188905260440160206040518083038186803b158015611e0557600080fd5b505afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d9190612fac565b611e47908361326f565b915080611e538161333d565b915050611d25565b50600482018190556101638054906000611e7483613322565b9091555050604080518481526020810188905290810185905260ff861660608201527f780c4077e0f47c1bd199622faa6862dfe04eb5f7ba9a003763251c9f411e64bc9060800160405180910390a1505050505050565b600054610100900460ff16611ef25760405162461bcd60e51b8152600401610cee906131b3565b565b600054610100900460ff16611f0f5760005460ff1615611f13565b303b155b611f2f5760405162461bcd60e51b8152600401610cee90613165565b600054610100900460ff16158015611f51576000805461ffff19166101011790555b611f5c600033611fa4565b8015610dcb576000805461ff001916905550565b600054610100900460ff16611f975760405162461bcd60e51b8152600401610cee906131b3565b61012d805460ff19169055565b610d01828261192f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c7d908490612a9b565b600082815261015f602052604081206003810154600482015482548492839261202992886123b8565b9250509150600082116120715760405162461bcd60e51b815260206004820152601060248201526f22221d102727aa2fa0afa427a62222a960811b6044820152606401610cee565b6001600160a01b03851660009081526007840160205260408120805460ff19166001908117909155840180548392906120ab90849061326f565b90915550506001600160a01b038516600090815261016760209081526040808320600587015460ff168452909152812080548392906120eb90849061326f565b90915550909695505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516121249190612fc5565b60006040518083038185875af1925050503d8060008114612161576040519150601f19603f3d011682016040523d82523d6000602084013e612166565b606091505b5050905080610c7d5760405162461bcd60e51b815260206004820152601760248201527f44443a204554485f5452414e534645525f4641494c45440000000000000000006044820152606401610cee565b6001600160a01b038216600090815261016660205260409020805460ff191682158015919091179091556122365761016080546001810182556000919091527fec7e130cdeeae65215fabbcddb1de429e603c4887cc659532eda903e493396630180546001600160a01b0319166001600160a01b03841617905561236f565b60005b6101605481101561236d57826001600160a01b0316610160828154811061226257612262613389565b6000918252602090912001546001600160a01b0316141561235b576101605461228d906001906132c8565b8114156122cd576101608054806122a6576122a6613373565b600082815260209020810160001990810180546001600160a01b031916905501905561236d565b61016080546122de906001906132c8565b815481106122ee576122ee613389565b60009182526020909120015461016080546001600160a01b03909216918390811061231b5761231b613389565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101608054806122a6576122a6613373565b8061236581613322565b915050612239565b505b816001600160a01b03167f1a2b936d526a67236c009e4ae88154b6373714f26c627ecef5afcd5d62c0536b826040516123ac911515815260200190565b60405180910390a25050565b6101655460405163277166bf60e11b81526001600160a01b038381166004830152602482018790526000928392839290911690634ee2cd7e9060440160206040518083038186803b15801561240c57600080fd5b505afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124449190612fac565b61016554604051630981b24d60e41b8152600481018a905291945087916001600160a01b039091169063981b24d09060240160206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c69190612fac565b6124d091906132c8565b9150816124dd84876132a9565b6124e79190613287565b90509450945094915050565b610165805460ff60a01b1916600160a01b17905560408051600280825260608201835260009260208301908036833750506101655482519293506001600160a01b03169183915060009061254957612549613389565b6001600160a01b0392831660209182029290920181019190915261016154604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b15801561259e57600080fd5b505afa1580156125b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d69190612cf7565b816001815181106125e9576125e9613389565b6001600160a01b039283166020918202929092010152610165546101615460405163095ea7b360e01b815290831660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561264957600080fd5b505af115801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190612ee6565b506101615460405163791ac94760e01b81526001600160a01b039091169063791ac947906126bc9085906000908690309042906004016131fe565b600060405180830381600087803b1580156126d657600080fd5b505af11580156126ea573d6000803e3d6000fd5b5050610165805460ff60a01b1916905550505050565b6060600061270f8360026132a9565b61271a90600261326f565b67ffffffffffffffff8111156127325761273261339f565b6040519080825280601f01601f19166020018201604052801561275c576020820181803683370190505b509050600360fc1b8160008151811061277757612777613389565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127a6576127a6613389565b60200101906001600160f81b031916908160001a90535060006127ca8460026132a9565b6127d590600161326f565b90505b600181111561284d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061280957612809613389565b1a60f81b82828151811061281f5761281f613389565b60200101906001600160f81b031916908160001a90535060049490941c936128468161330b565b90506127d8565b50831561289c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610cee565b9392505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103611a40565b803b61292f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610cee565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6129cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610cee565b600080846001600160a01b0316846040516129ea9190612fc5565b600060405180830381855af49150503d8060008114612a25576040519150601f19603f3d011682016040523d82523d6000602084013e612a2a565b606091505b5091509150612a5282826040518060600160405280602781526020016133f960279139612b6d565b95945050505050565b612a64816128cb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000612af0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ba69092919063ffffffff16565b805190915015610c7d5780806020019051810190612b0e9190612ee6565b610c7d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cee565b60608315612b7c57508161289c565b825115612b8c5782518084602001fd5b8160405162461bcd60e51b8152600401610cee919061309a565b6060612bb58484600085612bbd565b949350505050565b606082471015612c1e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610cee565b843b612c6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cee565b600080866001600160a01b03168587604051612c889190612fc5565b60006040518083038185875af1925050503d8060008114612cc5576040519150601f19603f3d011682016040523d82523d6000602084013e612cca565b606091505b5091509150610be1828286612b6d565b600060208284031215612cec57600080fd5b813561289c816133b5565b600060208284031215612d0957600080fd5b815161289c816133b5565b60008060408385031215612d2757600080fd5b8235612d32816133b5565b91506020830135612d42816133ca565b809150509250929050565b60008060408385031215612d6057600080fd5b8235612d6b816133b5565b9150602083013567ffffffffffffffff80821115612d8857600080fd5b818501915085601f830112612d9c57600080fd5b813581811115612dae57612dae61339f565b604051601f8201601f19908116603f01168101908382118183101715612dd657612dd661339f565b81604052828152886020848701011115612def57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612e2457600080fd5b8235612e2f816133b5565b946020939093013593505050565b60008060408385031215612e5057600080fd5b8235612e5b816133b5565b9150602083013560ff81168114612d4257600080fd5b60008060208385031215612e8457600080fd5b823567ffffffffffffffff80821115612e9c57600080fd5b818501915085601f830112612eb057600080fd5b813581811115612ebf57600080fd5b8660208260051b8501011115612ed457600080fd5b60209290920196919550909350505050565b600060208284031215612ef857600080fd5b815161289c816133ca565b600060208284031215612f1557600080fd5b5035919050565b60008060408385031215612f2f57600080fd5b823591506020830135612d42816133b5565b600060208284031215612f5357600080fd5b81356001600160e01b03198116811461289c57600080fd5b600080600060608486031215612f8057600080fd5b8335612f8b816133b5565b92506020840135612f9b816133b5565b929592945050506040919091013590565b600060208284031215612fbe57600080fd5b5051919050565b60008251612fd78184602087016132df565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130198160178501602088016132df565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161304a8160288401602088016132df565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561308e57835183529284019291840191600101613072565b50909695505050505050565b60208152600082518060208401526130b98160408501602087016132df565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561324e5784516001600160a01b031683529383019391830191600101613229565b50506001600160a01b03969096166060850152505050608001529392505050565b600082198211156132825761328261335d565b500190565b6000826132a457634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156132c3576132c361335d565b500290565b6000828210156132da576132da61335d565b500390565b60005b838110156132fa5781810151838201526020016132e2565b838111156112b85750506000910152565b60008161331a5761331a61335d565b506000190190565b60006000198214156133365761333661335d565b5060010190565b600060ff821660ff8114156133545761335461335d565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dcb57600080fd5b8015158114610dcb57600080fdfecf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a050416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122031c5b7465987af13cff5d27c40bfc7bd017a3b04707578e4b0fb0c65c58fbc1664736f6c63430008050033",
  "deployedBytecode": "0x6080604052600436106102065760003560e01c806380313d3111610117578063b2118a8d116100a5578063d547741f1161006c578063d547741f14610634578063daf9412314610654578063f301af4214610674578063f78bddf3146106f8578063fd21c1251461071857005b8063b2118a8d1461059d578063b854aca0146105bd578063b95c5746146105dd578063c760da04146105f4578063cb0968fa1461061457005b806388f82020116100e957806388f82020146104f75780638980f11f1461052857806391d1485414610548578063a217fddf14610568578063ae169a501461057d57005b806380313d31146104915780638129fc1c1461049957806382b2e257146104ae5780638580cf76146104c357005b806336568abe116101945780634f1ef286116101665780634f1ef286146103ea5780635069b864146103fd5780635c975abb146104365780635e732dd81461044f578063713725441461046f57005b806336568abe146103725780633659cfe6146103925780633fc15f15146103b25780634c95bc93146103d357005b80631694505e116101d85780631694505e146102a95780631a19aa40146102e2578063248a9ca31461030257806327ce464e146103325780632f2ff15d1461035257005b806301ffc9a71461020f57806308bf9922146102445780630958dbbc1461026957806312065fe01461029657005b3661020d57005b005b34801561021b57600080fd5b5061022f61022a366004612f41565b61072d565b60405190151581526020015b60405180910390f35b34801561025057600080fd5b5061025b6101645481565b60405190815260200161023b565b34801561027557600080fd5b50610289610284366004612e3d565b610773565b60405161023b9190613056565b3480156102a257600080fd5b504761025b565b3480156102b557600080fd5b50610161546102ca906001600160a01b031681565b6040516001600160a01b03909116815260200161023b565b3480156102ee57600080fd5b5061025b6102fd366004612cda565b610924565b34801561030e57600080fd5b5061025b61031d366004612f03565b600090815260c9602052604090206001015490565b34801561033e57600080fd5b5061020d61034d366004612cda565b610bf4565b34801561035e57600080fd5b5061020d61036d366004612f1c565b610c57565b34801561037e57600080fd5b5061020d61038d366004612f1c565b610c82565b34801561039e57600080fd5b5061020d6103ad366004612cda565b610d05565b3480156103be57600080fd5b50610165546102ca906001600160a01b031681565b3480156103df57600080fd5b5061025b6101625481565b61020d6103f8366004612d4d565b610dce565b34801561040957600080fd5b5061025b610418366004612e3d565b61016760209081526000928352604080842090915290825290205481565b34801561044257600080fd5b5061012d5460ff1661022f565b34801561045b57600080fd5b5061020d61046a366004612f03565b610e84565b34801561047b57600080fd5b5061025b6000805160206133d983398151915281565b61020d610ec6565b3480156104a557600080fd5b5061020d610f3e565b3480156104ba57600080fd5b5061025b611031565b3480156104cf57600080fd5b5061025b7f5a8bfb9223d93ad39e310233fff7bc65227887789e6e83c62b12f0dfdd782ec381565b34801561050357600080fd5b5061022f610512366004612cda565b6101666020526000908152604090205460ff1681565b34801561053457600080fd5b5061020d610543366004612e11565b6110b3565b34801561055457600080fd5b5061022f610563366004612f1c565b6110e0565b34801561057457600080fd5b5061025b600081565b34801561058957600080fd5b5061020d610598366004612f03565b61110b565b3480156105a957600080fd5b5061020d6105b8366004612f6b565b61128b565b3480156105c957600080fd5b5061020d6105d8366004612d14565b6112be565b3480156105e957600080fd5b5061025b6101635481565b34801561060057600080fd5b5061020d61060f366004612e71565b611344565b34801561062057600080fd5b506102ca61062f366004612f03565b611465565b34801561064057600080fd5b5061020d61064f366004612f1c565b611490565b34801561066057600080fd5b5061028961066f366004612e3d565b6114b6565b34801561068057600080fd5b506106c861068f366004612f03565b61015f60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909160ff1686565b604080519687526020870195909552938501929092526060840152608083015260ff1660a082015260c00161023b565b34801561070457600080fd5b5061025b610713366004612e3d565b6116fa565b34801561072457600080fd5b5061020d61178f565b60006001600160e01b03198216637965db0b60e01b148061075e57506001600160e01b03198216630ae169a560e41b145b8061076d575061076d82611896565b92915050565b606060006101635467ffffffffffffffff8111156107935761079361339f565b6040519080825280602002602001820160405280156107bc578160200160208202803683370190505b5090506000805b6101635481101561087e57600081815261015f602052604090206005015460ff90811690861681141561086b57600082815261015f602090815260408083206001600160a01b038b1684526007810183528184205460069091019092529091205460ff918216911681158015610837575080155b15610868578386868151811061084f5761084f613389565b60209081029190910101528461086481613322565b9550505b50505b508061087681613322565b9150506107c3565b5060008167ffffffffffffffff81111561089a5761089a61339f565b6040519080825280602002602001820160405280156108c3578160200160208202803683370190505b50905060005b8281101561091a578381815181106108e3576108e3613389565b60200260200101518282815181106108fd576108fd613389565b60209081029190910101528061091281613322565b9150506108c9565b5095945050505050565b6001600160a01b0381166000908152610166602052604081205460ff16610bec57610165546040805163020debef60e61b815290516000926001600160a01b03169163837afbc0916004808301926020929190829003018186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190612fac565b6101655460405163277166bf60e11b81526001600160a01b0386811660048301526024820184905292935060009290911690634ee2cd7e9060440160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190612fac565b61016554604051630981b24d60e41b8152600481018590529192506000916001600160a01b039091169063981b24d09060240160206040518083038186803b158015610a9957600080fd5b505afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612fac565b90506000610add611031565b90506000805b61016054811015610bc2576101655461016080546001600160a01b0390921691634ee2cd7e919084908110610b1a57610b1a613389565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b0390911660048201526024810189905260440160206040518083038186803b158015610b6c57600080fd5b505afa158015610b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba49190612fac565b610bae908361326f565b915080610bba81613322565b915050610ae3565b50610bcd81846132c8565b610bd785846132a9565b610be19190613287565b979650505050505050565b506000919050565b6000610c0081336118cb565b61016580546001600160a01b0319166001600160a01b0384169081179091556040519081527fd68271512da4c3278e5f7e25443d78b7221df5389d259a6fbdc569f5b020e54d906020015b60405180910390a15050565b600082815260c96020526040902060010154610c7381336118cb565b610c7d838361192f565b505050565b6001600160a01b0381163314610cf75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610d0182826119b5565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d4e5760405162461bcd60e51b8152600401610cee906130cd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d80611a1c565b6001600160a01b031614610da65760405162461bcd60e51b8152600401610cee90613119565b610daf81611a4f565b60408051600080825260208201909252610dcb91839190611b18565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e175760405162461bcd60e51b8152600401610cee906130cd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e49611a1c565b6001600160a01b031614610e6f5760405162461bcd60e51b8152600401610cee90613119565b610e7882611a4f565b610d0182826001611b18565b6000610e9081336118cb565b6101648290556040518281527fee2f6e6e29939099157785f376fdb1a1a49dff6b9ac02f7e6ee4797ecfd49f7190602001610c4b565b7f5a8bfb9223d93ad39e310233fff7bc65227887789e6e83c62b12f0dfdd782ec3610ef181336118cb565b60003411610f335760405162461bcd60e51b815260206004820152600f60248201526e11110e881393d7d1551217d4d15395608a1b6044820152606401610cee565b610dcb346001611c63565b600054610100900460ff16610f595760005460ff1615610f5d565b303b155b610f795760405162461bcd60e51b8152600401610cee90613165565b600054610100900460ff16158015610f9b576000805461ffff19166101011790555b610fa3611ecb565b610fab611ecb565b610fb3611ef4565b610fbb611f70565b610fc6600033611fa4565b610fde6000805160206133d983398151915233611fa4565b64e8d4a510006101645561016180546001600160a01b03191673f491e7b69e4244ad4002bc14e878a34207e38c29179055610165805460ff60a01b191690558015610dcb576000805461ff001916905550565b610165546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190612fac565b905090565b6000805160206133d98339815191526110cc81336118cb565b610c7d6001600160a01b0384163384611fae565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815261015f60205260409020600201546111625760405162461bcd60e51b815260206004820152601560248201527444443a205245574152445f4e4f545f45584953545360581b6044820152606401610cee565b600081815261015f6020908152604080832033845260060190915290205460ff16156111d05760405162461bcd60e51b815260206004820152601860248201527f44443a204e4f545f414c4c4f5745445f544f5f434c41494d00000000000000006044820152606401610cee565b600081815261015f6020908152604080832033845260070190915290205460ff16156112375760405162461bcd60e51b815260206004820152601660248201527511110e88149155d0549117d21054d7d0d3105253515160521b6044820152606401610cee565b60006112438233612000565b9050611250335b826120fa565b604051818152339083907f3c9b0efd2967a5b39ada6ae8672433baffccdaa48a527ea0c7659336bed9ff0e9060200160405180910390a35050565b6000805160206133d98339815191526112a481336118cb565b6112b86001600160a01b0385168484611fae565b50505050565b60006112ca81336118cb565b6001600160a01b0383166000908152610166602052604090205460ff161515821515141561133a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f742073657420746f2073616d6520737461746500000000000000006044820152606401610cee565b610c7d83836121b7565b6000805b8281101561145557600084848381811061136457611364613389565b90506020020135905061138981600090815261015f6020526040902060020154151590565b80156113b35750600081815261015f6020908152604080832033845260060190915290205460ff16155b80156113dd5750600081815261015f6020908152604080832033845260070190915290205460ff16155b156114425760006113ee8233612000565b90506113fa818561326f565b9350336001600160a01b0316827f3c9b0efd2967a5b39ada6ae8672433baffccdaa48a527ea0c7659336bed9ff0e8360405161143891815260200190565b60405180910390a3505b508061144d81613322565b915050611348565b508015610c7d57610c7d3361124a565b610160818154811061147657600080fd5b6000918252602090912001546001600160a01b0316905081565b600082815260c960205260409020600101546114ac81336118cb565b610c7d83836119b5565b606060006101635467ffffffffffffffff8111156114d6576114d661339f565b6040519080825280602002602001820160405280156114ff578160200160208202803683370190505b5090506000805b6101635481101561165e57600081815261015f602052604090206005015460ff90811690861681141561164b57600082815261015f602081815260408084206001600160a01b038c81168087526007830185528387205460068401865284882054610165548b8a5297909652600390930154935163277166bf60e11b81526004810191909152602481019390935260ff91821695919093169390921690634ee2cd7e9060440160206040518083038186803b1580156115c457600080fd5b505afa1580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc9190612fac565b90508215801561160a575081155b80156116165750600081115b15611647578487878151811061162e5761162e613389565b60209081029190910101528561164381613322565b9650505b5050505b508061165681613322565b915050611506565b5060008167ffffffffffffffff81111561167a5761167a61339f565b6040519080825280602002602001820160405280156116a3578160200160208202803683370190505b50905060005b8281101561091a578381815181106116c3576116c3613389565b60200260200101518282815181106116dd576116dd613389565b6020908102919091010152806116f281613322565b9150506116a9565b6000806117078484610773565b905060005b815181101561178757600082828151811061172957611729613389565b602090810291909101810151600081815261015f90925260408220600381015460048201549154929450611760929091908a6123b8565b925050508085611770919061326f565b94505050808061177f90613322565b91505061170c565b505092915050565b7f5a8bfb9223d93ad39e310233fff7bc65227887789e6e83c62b12f0dfdd782ec36117ba81336118cb565b610165546001600160a01b03166118135760405162461bcd60e51b815260206004820152601a60248201527f4444203a204d41494e5f544f4b454e5f4e4f545f5345545445440000000000006044820152606401610cee565b600061181d611031565b9050610164548110156118725760405162461bcd60e51b815260206004820152601a60248201527f44443a20524551554952454d454e545f4e4f545f5041535345440000000000006044820152606401610cee565b426101625547611881826124f3565b476112b861188f83836132c8565b6000611c63565b60006001600160e01b03198216637965db0b60e01b148061076d57506301ffc9a760e01b6001600160e01b031983161461076d565b6118d582826110e0565b610d01576118ed816001600160a01b03166014612700565b6118f8836020612700565b604051602001611909929190612fe1565b60408051601f198184030181529082905262461bcd60e51b8252610cee9160040161309a565b61193982826110e0565b610d0157600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119bf82826110e0565b15610d0157600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b6001600160a01b038116611aa55760405162461bcd60e51b815260206004820152601c60248201527f5374616b696e673a2043616e6e6f74207a65726f2061646472657373000000006044820152606401610cee565b611aad6128a3565b6001600160a01b0316336001600160a01b031614610dcb5760405162461bcd60e51b815260206004820152602260248201527f5374616b696e673a204e6f7420746865204f776e6572206f6620436f6e74726160448201526118dd60f21b6064820152608401610cee565b6000611b22611a1c565b9050611b2d846128cb565b600083511180611b3a5750815b15611b4b57611b498484612970565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611c5c57805460ff191660011781556040516001600160a01b0383166024820152611bca90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612970565b50805460ff19168155611bdb611a1c565b6001600160a01b0316826001600160a01b031614611c535760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610cee565b611c5c85612a5b565b5050505050565b6101655460408051634b88b8ad60e11b815290516000926001600160a01b031691639711715a91600480830192602092919082900301818787803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190612fac565b61016354600081815261015f60205260408120868155600181018290554260028201556003810184905560058101805460ff191660ff8816179055929350909190805b6101605460ff82161015611e5b5760018360060160006101608460ff1681548110611d5257611d52613389565b6000918252602080832091909101546001600160a01b0390811684529083019390935260409091019020805460ff1916921515929092179091556101655461016080549190921691634ee2cd7e9160ff8516908110611db357611db3613389565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b0390911660048201526024810188905260440160206040518083038186803b158015611e0557600080fd5b505afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d9190612fac565b611e47908361326f565b915080611e538161333d565b915050611d25565b50600482018190556101638054906000611e7483613322565b9091555050604080518481526020810188905290810185905260ff861660608201527f780c4077e0f47c1bd199622faa6862dfe04eb5f7ba9a003763251c9f411e64bc9060800160405180910390a1505050505050565b600054610100900460ff16611ef25760405162461bcd60e51b8152600401610cee906131b3565b565b600054610100900460ff16611f0f5760005460ff1615611f13565b303b155b611f2f5760405162461bcd60e51b8152600401610cee90613165565b600054610100900460ff16158015611f51576000805461ffff19166101011790555b611f5c600033611fa4565b8015610dcb576000805461ff001916905550565b600054610100900460ff16611f975760405162461bcd60e51b8152600401610cee906131b3565b61012d805460ff19169055565b610d01828261192f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c7d908490612a9b565b600082815261015f602052604081206003810154600482015482548492839261202992886123b8565b9250509150600082116120715760405162461bcd60e51b815260206004820152601060248201526f22221d102727aa2fa0afa427a62222a960811b6044820152606401610cee565b6001600160a01b03851660009081526007840160205260408120805460ff19166001908117909155840180548392906120ab90849061326f565b90915550506001600160a01b038516600090815261016760209081526040808320600587015460ff168452909152812080548392906120eb90849061326f565b90915550909695505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516121249190612fc5565b60006040518083038185875af1925050503d8060008114612161576040519150601f19603f3d011682016040523d82523d6000602084013e612166565b606091505b5050905080610c7d5760405162461bcd60e51b815260206004820152601760248201527f44443a204554485f5452414e534645525f4641494c45440000000000000000006044820152606401610cee565b6001600160a01b038216600090815261016660205260409020805460ff191682158015919091179091556122365761016080546001810182556000919091527fec7e130cdeeae65215fabbcddb1de429e603c4887cc659532eda903e493396630180546001600160a01b0319166001600160a01b03841617905561236f565b60005b6101605481101561236d57826001600160a01b0316610160828154811061226257612262613389565b6000918252602090912001546001600160a01b0316141561235b576101605461228d906001906132c8565b8114156122cd576101608054806122a6576122a6613373565b600082815260209020810160001990810180546001600160a01b031916905501905561236d565b61016080546122de906001906132c8565b815481106122ee576122ee613389565b60009182526020909120015461016080546001600160a01b03909216918390811061231b5761231b613389565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101608054806122a6576122a6613373565b8061236581613322565b915050612239565b505b816001600160a01b03167f1a2b936d526a67236c009e4ae88154b6373714f26c627ecef5afcd5d62c0536b826040516123ac911515815260200190565b60405180910390a25050565b6101655460405163277166bf60e11b81526001600160a01b038381166004830152602482018790526000928392839290911690634ee2cd7e9060440160206040518083038186803b15801561240c57600080fd5b505afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124449190612fac565b61016554604051630981b24d60e41b8152600481018a905291945087916001600160a01b039091169063981b24d09060240160206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c69190612fac565b6124d091906132c8565b9150816124dd84876132a9565b6124e79190613287565b90509450945094915050565b610165805460ff60a01b1916600160a01b17905560408051600280825260608201835260009260208301908036833750506101655482519293506001600160a01b03169183915060009061254957612549613389565b6001600160a01b0392831660209182029290920181019190915261016154604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b15801561259e57600080fd5b505afa1580156125b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d69190612cf7565b816001815181106125e9576125e9613389565b6001600160a01b039283166020918202929092010152610165546101615460405163095ea7b360e01b815290831660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561264957600080fd5b505af115801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190612ee6565b506101615460405163791ac94760e01b81526001600160a01b039091169063791ac947906126bc9085906000908690309042906004016131fe565b600060405180830381600087803b1580156126d657600080fd5b505af11580156126ea573d6000803e3d6000fd5b5050610165805460ff60a01b1916905550505050565b6060600061270f8360026132a9565b61271a90600261326f565b67ffffffffffffffff8111156127325761273261339f565b6040519080825280601f01601f19166020018201604052801561275c576020820181803683370190505b509050600360fc1b8160008151811061277757612777613389565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127a6576127a6613389565b60200101906001600160f81b031916908160001a90535060006127ca8460026132a9565b6127d590600161326f565b90505b600181111561284d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061280957612809613389565b1a60f81b82828151811061281f5761281f613389565b60200101906001600160f81b031916908160001a90535060049490941c936128468161330b565b90506127d8565b50831561289c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610cee565b9392505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103611a40565b803b61292f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610cee565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6129cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610cee565b600080846001600160a01b0316846040516129ea9190612fc5565b600060405180830381855af49150503d8060008114612a25576040519150601f19603f3d011682016040523d82523d6000602084013e612a2a565b606091505b5091509150612a5282826040518060600160405280602781526020016133f960279139612b6d565b95945050505050565b612a64816128cb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000612af0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ba69092919063ffffffff16565b805190915015610c7d5780806020019051810190612b0e9190612ee6565b610c7d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cee565b60608315612b7c57508161289c565b825115612b8c5782518084602001fd5b8160405162461bcd60e51b8152600401610cee919061309a565b6060612bb58484600085612bbd565b949350505050565b606082471015612c1e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610cee565b843b612c6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cee565b600080866001600160a01b03168587604051612c889190612fc5565b60006040518083038185875af1925050503d8060008114612cc5576040519150601f19603f3d011682016040523d82523d6000602084013e612cca565b606091505b5091509150610be1828286612b6d565b600060208284031215612cec57600080fd5b813561289c816133b5565b600060208284031215612d0957600080fd5b815161289c816133b5565b60008060408385031215612d2757600080fd5b8235612d32816133b5565b91506020830135612d42816133ca565b809150509250929050565b60008060408385031215612d6057600080fd5b8235612d6b816133b5565b9150602083013567ffffffffffffffff80821115612d8857600080fd5b818501915085601f830112612d9c57600080fd5b813581811115612dae57612dae61339f565b604051601f8201601f19908116603f01168101908382118183101715612dd657612dd661339f565b81604052828152886020848701011115612def57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612e2457600080fd5b8235612e2f816133b5565b946020939093013593505050565b60008060408385031215612e5057600080fd5b8235612e5b816133b5565b9150602083013560ff81168114612d4257600080fd5b60008060208385031215612e8457600080fd5b823567ffffffffffffffff80821115612e9c57600080fd5b818501915085601f830112612eb057600080fd5b813581811115612ebf57600080fd5b8660208260051b8501011115612ed457600080fd5b60209290920196919550909350505050565b600060208284031215612ef857600080fd5b815161289c816133ca565b600060208284031215612f1557600080fd5b5035919050565b60008060408385031215612f2f57600080fd5b823591506020830135612d42816133b5565b600060208284031215612f5357600080fd5b81356001600160e01b03198116811461289c57600080fd5b600080600060608486031215612f8057600080fd5b8335612f8b816133b5565b92506020840135612f9b816133b5565b929592945050506040919091013590565b600060208284031215612fbe57600080fd5b5051919050565b60008251612fd78184602087016132df565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130198160178501602088016132df565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161304a8160288401602088016132df565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561308e57835183529284019291840191600101613072565b50909695505050505050565b60208152600082518060208401526130b98160408501602087016132df565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561324e5784516001600160a01b031683529383019391830191600101613229565b50506001600160a01b03969096166060850152505050608001529392505050565b600082198211156132825761328261335d565b500190565b6000826132a457634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156132c3576132c361335d565b500290565b6000828210156132da576132da61335d565b500390565b60005b838110156132fa5781810151838201526020016132e2565b838111156112b85750506000910152565b60008161331a5761331a61335d565b506000190190565b60006000198214156133365761333661335d565b5060010190565b600060ff821660ff8114156133545761335461335d565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dcb57600080fd5b8015158114610dcb57600080fdfecf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a050416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122031c5b7465987af13cff5d27c40bfc7bd017a3b04707578e4b0fb0c65c58fbc1664736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchClaimReward(uint256[])": {
        "details": "to claim multiple reward at once"
      },
      "buildingTradeDividendOfHolder(address)": {
        "details": "get total amount of building trade dividenonly calculate for reward that coming from swapAndShareReward function"
      },
      "excludedFromReward(address,bool)": {
        "details": "to Exclude address from reward distribution"
      },
      "getBalance()": {
        "details": "get total amount of FTM that owned by this contract"
      },
      "getRewardIdsUnclaimed(address,uint8)": {
        "details": "Get list if reward id that not yet claimed by holder",
        "params": {
          "holder": "is holder's address ",
          "rewardSource": "0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenBalance()": {
        "details": "get total amount of frock that owned by this contract"
      },
      "getTotalUnclaimedReward(address,uint8)": {
        "details": "Get total amount of reward that not yet claimed by holder",
        "params": {
          "holder": "is holder's address ",
          "rewardSource": "0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward"
        }
      },
      "getUnclaimedRewardIds(address,uint8)": {
        "details": "Get list if reward id that not yet claimed by holder",
        "params": {
          "holder": "is holder's address ",
          "rewardSource": "0 => Reward that coming from swapAndShareReward, 1 => Reward that coming from  shareReward"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "ERC20 token contract address",
          "tokenAmount": "Amount to recover"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "rescueERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount to rescue",
          "to": "Recipient address",
          "tokenContract": "ERC20 token contract address"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setMainToken(address)": {
        "details": "set main token (frock token) address"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 tokens locked up in this contract."
      },
      "rescueERC20(address,address,uint256)": {
        "notice": "Rescue ERC20 tokens locked up in this contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 824,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 827,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 806,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1001,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3150,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4072,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7662,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1023,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 1114,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6197,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "rewards",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_uint256,t_struct(Reward)6192_storage)"
      },
      {
        "astId": 6200,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "listExcludedFromReward",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6203,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IUniswapV2Router02)7565"
      },
      {
        "astId": 6205,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "lastRewardShare",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 6207,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "rewardLength",
        "offset": 0,
        "slot": "355",
        "type": "t_uint256"
      },
      {
        "astId": 6209,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "minimumFrockToSwap",
        "offset": 0,
        "slot": "356",
        "type": "t_uint256"
      },
      {
        "astId": 6211,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "mainToken",
        "offset": 0,
        "slot": "357",
        "type": "t_address"
      },
      {
        "astId": 6213,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "inSwap",
        "offset": 20,
        "slot": "357",
        "type": "t_bool"
      },
      {
        "astId": 6222,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "isExcludedFromReward",
        "offset": 0,
        "slot": "358",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6228,
        "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
        "label": "holderToTotalClaimed",
        "offset": 0,
        "slot": "359",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)7565": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(Reward)6192_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DividenDistributorV1.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)6192_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Reward)6192_storage": {
        "encoding": "inplace",
        "label": "struct DividenDistributorV1.Reward",
        "members": [
          {
            "astId": 6173,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6175,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6177,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "issuedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6179,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "snapshotId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6181,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "totalExcludedFromSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6183,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "rewardSource",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 6187,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "isExcludedFromReward",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6191,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/DividenDistributor/DividenDistributorV2.sol:DividenDistributorV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}