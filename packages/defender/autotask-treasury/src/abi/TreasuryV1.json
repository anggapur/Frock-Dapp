{
  "address": "0x6A3083F47d56dB7BdB2783698407Cc95A0DC7a1c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumTokenToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fixedLimitTokenToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentageToSwap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_mainToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryDestination",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToSwap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ftmBalanceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryDestination",
          "type": "address"
        }
      ],
      "name": "SwapAndSend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFixedTokenToSwap",
          "type": "uint256"
        }
      ],
      "name": "UpdateFixedTokenToSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMainTokenAddress",
          "type": "address"
        }
      ],
      "name": "UpdateMainToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumTokenToSwap",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinimumTokenToSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentageTokenToSwap",
          "type": "uint256"
        }
      ],
      "name": "UpdatePercentageTokenToSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryDestination",
          "type": "address"
        }
      ],
      "name": "UpdateTreasuryDestination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ftmBalanceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryDestination",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "WithdrawToken",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFixedTokenToSwap",
          "type": "uint256"
        }
      ],
      "name": "setFixedTokenToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "setMainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumTokenToSwap",
          "type": "uint256"
        }
      ],
      "name": "setMinimumTokenToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPercentageTokenToSwap",
          "type": "uint256"
        }
      ],
      "name": "setPercentageTokenToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasuryDestination",
          "type": "address"
        }
      ],
      "name": "setTreasuryDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8850b6953b5443d308c84fa3b68c5982893b4c8cac1e4b732825d33b4feea4da",
  "receipt": {
    "to": null,
    "from": "0x4b2F59151d4bb1692439226f872ae7D8B93A9B11",
    "contractAddress": "0x6A3083F47d56dB7BdB2783698407Cc95A0DC7a1c",
    "transactionIndex": 2,
    "gasUsed": "1334774",
    "logsBloom": "0x
    "blockHash": "0x0001628000000293c8a5eaf37f11bd502d2c81091b1b0f2f507d0cfe112437bc",
    "transactionHash": "0x8850b6953b5443d308c84fa3b68c5982893b4c8cac1e4b732825d33b4feea4da",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 32956678,
        "transactionHash": "0x8850b6953b5443d308c84fa3b68c5982893b4c8cac1e4b732825d33b4feea4da",
        "address": "0x6A3083F47d56dB7BdB2783698407Cc95A0DC7a1c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b2f59151d4bb1692439226f872ae7d8b93a9b11",
          "0x0000000000000000000000004b2f59151d4bb1692439226f872ae7d8b93a9b11"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0001628000000293c8a5eaf37f11bd502d2c81091b1b0f2f507d0cfe112437bc"
      }
    ],
    "blockNumber": 32956678,
    "cumulativeGasUsed": "1722923",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000",
    "500000000000",
    2500,
    "0xe679ae2b7e97D759eC758fafe50cB011eBfb7D77",
    "0x8Eaedb026f0c6A0174Ca5Eb9C4eCFeD28237a176"
  ],
  "solcInputHash": "6f78f81e192b1ef476c8ae9242dd6f11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokenToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedLimitTokenToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageToSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryDestination\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ftmBalanceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryDestination\",\"type\":\"address\"}],\"name\":\"SwapAndSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFixedTokenToSwap\",\"type\":\"uint256\"}],\"name\":\"UpdateFixedTokenToSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMainTokenAddress\",\"type\":\"address\"}],\"name\":\"UpdateMainToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumTokenToSwap\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumTokenToSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentageTokenToSwap\",\"type\":\"uint256\"}],\"name\":\"UpdatePercentageTokenToSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryDestination\",\"type\":\"address\"}],\"name\":\"UpdateTreasuryDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ftmBalanceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryDestination\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFixedTokenToSwap\",\"type\":\"uint256\"}],\"name\":\"setFixedTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setMainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumTokenToSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentageTokenToSwap\",\"type\":\"uint256\"}],\"name\":\"setPercentageTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryDestination\",\"type\":\"address\"}],\"name\":\"setTreasuryDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBalance()\":{\"details\":\"Get total amount of FTM that owned by this contract\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenBalance()\":{\"details\":\"Get total amount of FROCK that owned by this contract\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setFixedTokenToSwap(uint256)\":{\"details\":\"Set Fixed Token of mainToken that able to swap at once\"},\"setMainToken(address)\":{\"details\":\"Set main token (FROCK token) address\"},\"setMinimumTokenToSwap(uint256)\":{\"details\":\"Set Minimum Token of mainToken that should owned to swap\"},\"setPercentageTokenToSwap(uint256)\":{\"details\":\"Set Percentage of Token to Swap\"},\"setTreasuryDestination(address)\":{\"details\":\"Set treasuryDestination Address\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swapAndSend()\":{\"details\":\"Swap Frock token on DEX and send the FTM to treasuryDestinationMaximum amount of swap based on maximumTokenToSwap\"},\"withdraw()\":{\"details\":\"Withdraw FTM to treasuryDestination address\"},\"withdrawToken(address,uint256)\":{\"details\":\"Withdraw Main Token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury/TreasuryV1.sol\":\"TreasuryV1\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Treasury/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\",\"keccak256\":\"0xa6d7cfe9ffe88c9b32c0c27eeec69eff4f217b062ef1a03c24bcecfecfb00537\",\"license\":\"MIT\"},\"contracts/Treasury/TreasuryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\ncontract TreasuryV1 is              \\n    AccessControl    \\n{\\n    bool private inSwap;\\n    uint256 minimumTokenToSwap; // maximum token that able to swap at one time\\n    uint256 fixedLimitTokenToSwap; // fixed limit token to swap\\n    uint256 percentageToSwap; // 2 digits _00\\n    address mainToken; // Frock Token Address\\n    address treasuryDestination; // FTM will be sent to this address after swap\\n    bytes32 public constant CALLER_ROLE = keccak256(\\\"CALLER\\\");\\n    IUniswapV2Router02 public uniswapV2Router;\\n\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    event SwapAndSend(uint256 amountToSwap, uint256 ftmBalanceAmount, address treasuryDestination);\\n    event Withdraw(uint256 ftmBalanceAmount, address treasuryDestination);\\n    event WithdrawToken(uint256 amount, address destination);\\n    event UpdateMainToken(address newMainTokenAddress);\\n    event UpdateTreasuryDestination(address newTreasuryDestination);\\n    event UpdateMinimumTokenToSwap(uint256 newMinimumTokenToSwap);\\n    event UpdateFixedTokenToSwap(uint256 newFixedTokenToSwap);\\n    event UpdatePercentageTokenToSwap(uint256 newPercentageTokenToSwap);    \\n    \\n    // Initialize\\n    constructor(\\n        uint256 _minimumTokenToSwap,\\n        uint256 _fixedLimitTokenToSwap,\\n        uint256 _percentageToSwap,\\n        address _mainToken,\\n        address _treasuryDestination\\n    ) {       \\n\\n        // Setup deployer as Admin when construction\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());        \\n        \\n        uniswapV2Router = IUniswapV2Router02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);        \\n        inSwap = false;\\n        \\n        minimumTokenToSwap = _minimumTokenToSwap;\\n        fixedLimitTokenToSwap = _fixedLimitTokenToSwap;\\n        percentageToSwap = _percentageToSwap;\\n        mainToken = _mainToken;\\n        treasuryDestination = _treasuryDestination;\\n    }  \\n\\n    /**\\n     * @dev Swap Frock token on DEX and send the FTM to treasuryDestination\\n     * @dev Maximum amount of swap based on maximumTokenToSwap\\n     */\\n    function swapAndSend() external onlyRole(CALLER_ROLE) {  \\n        require(mainToken != address(0), \\\"Treasury: Main Token not setted yet\\\");\\n        require(treasuryDestination != address(0), \\\"Treasury : Destination not setted yet\\\");        \\n        require(minimumTokenToSwap > 0, \\\"Treasury: Minimum Token to Swap not setted yet\\\");         \\n        require(getTokenBalance() > minimumTokenToSwap, \\\"Treasury: Not passing minimum token\\\");\\n        require(getTokenBalance() >= fixedLimitTokenToSwap, \\\"Treasury: Not passing fixed limit token to swap\\\");\\n\\n        uint256 percentageAmountToSwap = getTokenBalance() * percentageToSwap / 10000;\\n        uint256 amountToSwap = percentageAmountToSwap >= fixedLimitTokenToSwap ? percentageAmountToSwap : fixedLimitTokenToSwap;\\n\\n        // Swap        \\n        _swapTokensForEth(amountToSwap);\\n\\n        uint256 ftmBalanceAmount = getBalance();     \\n\\n        // Send FTM\\n        _safeTransferETH(treasuryDestination, ftmBalanceAmount);\\n\\n        emit SwapAndSend(amountToSwap, ftmBalanceAmount, treasuryDestination);\\n    }    \\n\\n    /**\\n     * @dev Withdraw FTM to treasuryDestination address\\n     */\\n    function withdraw() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 ftmBalanceAmount = getBalance();  \\n        // Send FTM\\n        _safeTransferETH(treasuryDestination, ftmBalanceAmount);\\n\\n        emit Withdraw(ftmBalanceAmount, treasuryDestination);\\n    }\\n\\n     /**\\n     * @dev Withdraw Main Token\\n     */\\n    function withdrawToken(address destination, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {        \\n        // Send Token\\n        require(\\n            IERC20(mainToken).transfer(destination, amount), \\\"Treasury: Fail Transfer Token\\\"\\n        );        \\n        emit WithdrawToken(amount, destination);\\n    }\\n      \\n    /**\\n     * @dev Swap FROCK to DEX to FTM\\n     */        \\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(mainToken);\\n        path[1] = uniswapV2Router.WETH();\\n        IERC20(mainToken).approve(address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    \\n\\n    /**\\n     * @dev Get total amount of FROCK that owned by this contract\\n     */\\n    function getTokenBalance() public view returns(uint256 tokenAmount) {\\n        return IERC20(mainToken).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Get total amount of FTM that owned by this contract\\n     */\\n    function getBalance() public view returns(uint256 balance) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Set main token (FROCK token) address\\n     */\\n    function setMainToken(address tokenAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mainToken = tokenAddress;\\n        emit UpdateMainToken(tokenAddress);\\n    }\\n\\n    /** \\n     * @dev Set treasuryDestination Address\\n     */\\n    function setTreasuryDestination(address newTreasuryDestination) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        treasuryDestination = newTreasuryDestination;\\n        emit UpdateTreasuryDestination(newTreasuryDestination);\\n    }\\n\\n    /**\\n     * @dev Set Minimum Token of mainToken that should owned to swap\\n     */\\n    function setMinimumTokenToSwap(uint256 newMinimumTokenToSwap) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        minimumTokenToSwap = newMinimumTokenToSwap;\\n        emit UpdateMinimumTokenToSwap(newMinimumTokenToSwap);\\n    }\\n\\n     /**\\n     * @dev Set Fixed Token of mainToken that able to swap at once\\n     */\\n    function setFixedTokenToSwap(uint256 newFixedTokenToSwap) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        fixedLimitTokenToSwap = newFixedTokenToSwap;\\n        emit UpdateFixedTokenToSwap(newFixedTokenToSwap);\\n    }\\n\\n\\n     /**\\n     * @dev Set Percentage of Token to Swap\\n     */\\n    function setPercentageTokenToSwap(uint256 newPercentageTokenToSwap) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        percentageToSwap = newPercentageTokenToSwap;\\n        emit UpdatePercentageTokenToSwap(newPercentageTokenToSwap);\\n    }\\n\\n    /**\\n     * @dev Function to Transfer FTM\\n     */\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'Treasury: ETH_TRANSFER_FAILED');\\n    }        \\n    \\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xdcac141238aa13eff712d6ebbb34c515984de7008e0c125931d1227584307955\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200163838038062001638833981016040819052620000349162000179565b62000041600033620000ac565b6007805473f491e7b69e4244ad4002bc14e878a34207e38c296001600160a01b0319918216179091556001805460ff191690556002959095556003939093556004919091556005805484166001600160a01b03928316179055600680549093169116179055620001ce565b620000b88282620000bc565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000b8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001183390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200017457600080fd5b919050565b600080600080600060a086880312156200019257600080fd5b855194506020860151935060408601519250620001b2606087016200015c565b9150620001c2608087016200015c565b90509295509295909350565b61145a80620001de6000396000f3fe60806040526004361061010c5760003560e01c80634e3bb8141161009a5780639cd9f1fd116100615780639cd9f1fd1461030d5780639e281a9814610322578063a217fddf14610342578063a66570d714610357578063d547741f1461037757005b80634e3bb81414610264578063774237fc1461028457806382b2e257146102b85780638eb60def146102cd57806391d14854146102ed57005b8063248a9ca3116100de578063248a9ca3146101bf57806327ce464e146101ef5780632f2ff15d1461020f57806336568abe1461022f5780633ccfd60b1461024f57005b806301ffc9a71461011557806312065fe01461014a578063124454dc146101675780631694505e1461018757005b3661011357005b005b34801561012157600080fd5b506101356101303660046111b2565b610397565b60405190151581526020015b60405180910390f35b34801561015657600080fd5b50475b604051908152602001610141565b34801561017357600080fd5b50610113610182366004611169565b6103ce565b34801561019357600080fd5b506007546101a7906001600160a01b031681565b6040516001600160a01b039091168152602001610141565b3480156101cb57600080fd5b506101596101da366004611169565b60009081526020819052604090206001015490565b3480156101fb57600080fd5b5061011361020a3660046110e1565b610417565b34801561021b57600080fd5b5061011361022a366004611182565b610471565b34801561023b57600080fd5b5061011361024a366004611182565b61049c565b34801561025b57600080fd5b5061011361051f565b34801561027057600080fd5b5061011361027f366004611169565b610585565b34801561029057600080fd5b506101597f69fb73f918fab3af495c0a457de635771a39f3d6cfedc797ae0b5bb56c83c6f781565b3480156102c457600080fd5b506101596105c6565b3480156102d957600080fd5b506101136102e83660046110e1565b610647565b3480156102f957600080fd5b50610135610308366004611182565b6106a1565b34801561031957600080fd5b506101136106ca565b34801561032e57600080fd5b5061011361033d36600461111b565b6109ad565b34801561034e57600080fd5b50610159600081565b34801561036357600080fd5b50610113610372366004611169565b610ad1565b34801561038357600080fd5b50610113610392366004611182565b610b12565b60006001600160e01b03198216637965db0b60e01b14806103c857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103da8133610b38565b60038290556040518281527f89757786f1322a609aa51fd0977025898edc00f1c069876c92a4c9784e990bc5906020015b60405180910390a15050565b60006104238133610b38565b600580546001600160a01b0319166001600160a01b0384169081179091556040519081527fd68271512da4c3278e5f7e25443d78b7221df5389d259a6fbdc569f5b020e54d9060200161040b565b60008281526020819052604090206001015461048d8133610b38565b6104978383610b9c565b505050565b6001600160a01b03811633146105115760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61051b8282610c20565b5050565b600061052b8133610b38565b6006544790610543906001600160a01b031682610c85565b600654604080518381526001600160a01b0390921660208301527f8353ffcac0876ad14e226d9783c04540bfebf13871e868157d2a391cad98e918910161040b565b60006105918133610b38565b60028290556040518281527f1e1a24d6d9d6d3f5673fc89b9d255bc943c56195db61f63ca23fb2a1630fdd6f9060200161040b565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561060a57600080fd5b505afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906111dc565b905090565b60006106538133610b38565b600680546001600160a01b0319166001600160a01b0384169081179091556040519081527f62e47dc4d048e82c3c2e05e7ecb7b94b07614b52d2e16c446f114e4b32b9bddc9060200161040b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7f69fb73f918fab3af495c0a457de635771a39f3d6cfedc797ae0b5bb56c83c6f76106f58133610b38565b6005546001600160a01b03166107595760405162461bcd60e51b815260206004820152602360248201527f54726561737572793a204d61696e20546f6b656e206e6f7420736574746564206044820152621e595d60ea1b6064820152608401610508565b6006546001600160a01b03166107bf5760405162461bcd60e51b815260206004820152602560248201527f5472656173757279203a2044657374696e6174696f6e206e6f7420736574746560448201526419081e595d60da1b6064820152608401610508565b6000600254116108285760405162461bcd60e51b815260206004820152602e60248201527f54726561737572793a204d696e696d756d20546f6b656e20746f20537761702060448201526d1b9bdd081cd95d1d1959081e595d60921b6064820152608401610508565b6002546108336105c6565b1161088c5760405162461bcd60e51b815260206004820152602360248201527f54726561737572793a204e6f742070617373696e67206d696e696d756d20746f60448201526235b2b760e91b6064820152608401610508565b6003546108976105c6565b10156108fd5760405162461bcd60e51b815260206004820152602f60248201527f54726561737572793a204e6f742070617373696e67206669786564206c696d6960448201526e07420746f6b656e20746f207377617608c1b6064820152608401610508565b600061271060045461090d6105c6565b6109179190611364565b6109219190611342565b9050600060035482101561093757600354610939565b815b905061094481610d42565b600654479061095c906001600160a01b031682610c85565b60065460408051848152602081018490526001600160a01b0390921682820152517f0c7f67a24924aaae43ae29a1ec56abf4fef0e72069639b16a359496faad748339181900360600190a150505050565b60006109b98133610b38565b60055460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b158015610a0757600080fd5b505af1158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190611147565b610a8b5760405162461bcd60e51b815260206004820152601d60248201527f54726561737572793a204661696c205472616e7366657220546f6b656e0000006044820152606401610508565b604080518381526001600160a01b03851660208201527f52abf0ee1c51330cd0473cae6ac72ce4bf9b29dce23e5c4e776145df1fec8283910160405180910390a1505050565b6000610add8133610b38565b60048290556040518281527ffa7aee545b73f89fa39b3a52babfa12e7623e76d371f14b950e16be367059b929060200161040b565b600082815260208190526040902060010154610b2e8133610b38565b6104978383610c20565b610b4282826106a1565b61051b57610b5a816001600160a01b03166014610f3e565b610b65836020610f3e565b604051602001610b76929190611211565b60408051601f198184030181529082905262461bcd60e51b825261050891600401611286565b610ba682826106a1565b61051b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610bdc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c2a82826106a1565b1561051b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516000808252602082019092526001600160a01b038416908390604051610caf91906111f5565b60006040518083038185875af1925050503d8060008114610cec576040519150601f19603f3d011682016040523d82523d6000602084013e610cf1565b606091505b50509050806104975760405162461bcd60e51b815260206004820152601d60248201527f54726561737572793a204554485f5452414e534645525f4641494c45440000006044820152606401610508565b6001805460ff191681179055604080516002808252606082018352600092602083019080368337505060055482519293506001600160a01b031691839150600090610d8f57610d8f6113e0565b6001600160a01b03928316602091820292909201810191909152600754604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b91906110fe565b81600181518110610e2e57610e2e6113e0565b6001600160a01b03928316602091820292909201015260055460075460405163095ea7b360e01b815290831660048201526024810185905291169063095ea7b390604401602060405180830381600087803b158015610e8c57600080fd5b505af1158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec49190611147565b5060075460405163791ac94760e01b81526001600160a01b039091169063791ac94790610efe9085906000908690309042906004016112b9565b600060405180830381600087803b158015610f1857600080fd5b505af1158015610f2c573d6000803e3d6000fd5b50506001805460ff1916905550505050565b60606000610f4d836002611364565b610f5890600261132a565b67ffffffffffffffff811115610f7057610f706113f6565b6040519080825280601f01601f191660200182016040528015610f9a576020820181803683370190505b509050600360fc1b81600081518110610fb557610fb56113e0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610fe457610fe46113e0565b60200101906001600160f81b031916908160001a9053506000611008846002611364565b61101390600161132a565b90505b600181111561108b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611047576110476113e0565b1a60f81b82828151811061105d5761105d6113e0565b60200101906001600160f81b031916908160001a90535060049490941c93611084816113b3565b9050611016565b5083156110da5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610508565b9392505050565b6000602082840312156110f357600080fd5b81356110da8161140c565b60006020828403121561111057600080fd5b81516110da8161140c565b6000806040838503121561112e57600080fd5b82356111398161140c565b946020939093013593505050565b60006020828403121561115957600080fd5b815180151581146110da57600080fd5b60006020828403121561117b57600080fd5b5035919050565b6000806040838503121561119557600080fd5b8235915060208301356111a78161140c565b809150509250929050565b6000602082840312156111c457600080fd5b81356001600160e01b0319811681146110da57600080fd5b6000602082840312156111ee57600080fd5b5051919050565b60008251611207818460208701611383565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611249816017850160208801611383565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161127a816028840160208801611383565b01602801949350505050565b60208152600082518060208401526112a5816040850160208701611383565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156113095784516001600160a01b0316835293830193918301916001016112e4565b50506001600160a01b03969096166060850152505050608001529392505050565b6000821982111561133d5761133d6113ca565b500190565b60008261135f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561137e5761137e6113ca565b500290565b60005b8381101561139e578181015183820152602001611386565b838111156113ad576000848401525b50505050565b6000816113c2576113c26113ca565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461142157600080fd5b5056fea26469706673582212204097e0a4637893e91f9bfde914a5df9f4f5512277ce4ae925d1b84caed5ac76a64736f6c63430008050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBalance()": {
        "details": "Get total amount of FTM that owned by this contract"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenBalance()": {
        "details": "Get total amount of FROCK that owned by this contract"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setFixedTokenToSwap(uint256)": {
        "details": "Set Fixed Token of mainToken that able to swap at once"
      },
      "setMainToken(address)": {
        "details": "Set main token (FROCK token) address"
      },
      "setMinimumTokenToSwap(uint256)": {
        "details": "Set Minimum Token of mainToken that should owned to swap"
      },
      "setPercentageTokenToSwap(uint256)": {
        "details": "Set Percentage of Token to Swap"
      },
      "setTreasuryDestination(address)": {
        "details": "Set treasuryDestination Address"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swapAndSend()": {
        "details": "Swap Frock token on DEX and send the FTM to treasuryDestinationMaximum amount of swap based on maximumTokenToSwap"
      },
      "withdraw()": {
        "details": "Withdraw FTM to treasuryDestination address"
      },
      "withdrawToken(address,uint256)": {
        "details": "Withdraw Main Token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4198,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4193_storage)"
      },
      {
        "astId": 9992,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "inSwap",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 9994,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "minimumTokenToSwap",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9996,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "fixedLimitTokenToSwap",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9998,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "percentageToSwap",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10000,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "mainToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10002,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "treasuryDestination",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10010,
        "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router02)9983"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)9983": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4193_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4193_storage"
      },
      "t_struct(RoleData)4193_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4190,
            "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4192,
            "contract": "contracts/Treasury/TreasuryV1.sol:TreasuryV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}